name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UV_VERSION: "0.4.18"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        include:
          - python-version: "3.12"
            coverage: true

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install GDAL (latest version matching your Homebrew setup)
        run: |
          # Add ubuntugis repository for latest GDAL
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable -y
          sudo apt-get update

          # Install GDAL and build dependencies
          sudo apt-get install -y \
            gdal-bin \
            libgdal-dev \
            libgeos-dev \
            libproj-dev \
            gcc \
            g++ \
            pkg-config \
            libspatialindex-dev \
            python3-dev

      - name: Configure GDAL environment
        run: |
          # Get GDAL version and set environment
          GDAL_VERSION=$(gdal-config --version)
          echo "âœ… GDAL Version: $GDAL_VERSION"
          echo "GDAL_VERSION=$GDAL_VERSION" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=/usr/include/gdal" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/usr/include/gdal" >> $GITHUB_ENV

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          echo "ðŸ“¦ Installing dependencies with GDAL $GDAL_VERSION..."
          uv sync --all-extras --frozen

      - name: Verify installation
        run: |
          uv run python -c "import geopandas; print('GeoPandas version:', geopandas.__version__)"
          uv run python -c "import fastapi; print('FastAPI version:', fastapi.__version__)"

      - name: Run linting
        run: |
          uv run ruff check . --output-format=github
          uv run ruff format --check .

      - name: Run type checking
        run: uv run mypy app/ --install-types --non-interactive

      - name: Run essential tests (models, config, core)
        run: |
          uv run pytest tests/test_models/ tests/test_config.py tests/test_database.py -v --maxfail=5
        env:
          OPENAI_API_KEY: 'mock-key-for-testing'

      - name: Run basic service tests
        run: |
          uv run pytest tests/test_services/test_nlp_service.py tests/test_services/test_metadata_service.py -v --maxfail=3
        env:
          OPENAI_API_KEY: 'mock-key-for-testing'

      - name: Comprehensive test suite (optional for MVP)
        continue-on-error: true
        run: |
          echo "ðŸ”„ Running comprehensive test suite (Step 14 - Production Ready)"
          if [ "${{ matrix.coverage }}" = "true" ]; then
            uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --maxfail=10
          else
            uv run pytest tests/ -v --maxfail=10
          fi
        env:
          OPENAI_API_KEY: 'mock-key-for-testing'

      - name: Upload coverage reports
        if: matrix.coverage == true
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
